AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  githubpassword:
    Type: String
Resources:
  ArtifactStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
  CPRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [codepipeline.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: CodePipelineAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - "codebuild:BatchGetBuilds"
                - "codebuild:StartBuild"            
                - "codedeploy:CreateDeployment"
                - "codedeploy:GetApplicationRevision"
                - "codedeploy:GetDeployment"
                - "codedeploy:GetDeploymentConfig"
                - "codedeploy:RegisterApplicationRevision"
                - "cloudwatch:*"
                - "ec2:*"
                - "iam:PassRole" 
                - "logs:*"
                - "s3:*"
                - "s3:GetObject"
                - "s3:GetObjectVersion"
                - "s3:GetBucketVersioning"              
                Resource: '*'
                Effect: Allow
              - Action:
                - "s3:PutObject"
                Resource:
                - "arn:aws:s3:::codepipeline*"
                Effect: Allow
  CBRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName:
        Fn::Sub: CBRole-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: "CodeBuildNestedCFNAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "ec2:Describe*"
                  - "ec2:AuthorizeSecurityGroupIngress"
                  - "iam:Get*"
                  - "iam:List*"
                  - "logs:Describe*"
                  - "logs:Get*"
                  - "tag:Get*"
                Resource:
                  - "*"
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
              -
                Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:ListBucket"
                Resource:
                  - Fn::Sub: arn:aws:s3:::codepipeline-${AWS::Region}-*
                  - Fn::Sub: arn:aws:s3:::${ArtifactStoreBucket}/*
  CDRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 
        Fn::Sub: MicroqoderCodeDeployServiceRole-${AWS::StackName}
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codedeploy.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  TomcatInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: MicroqoderTomcatInstanceRole-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        -
          PolicyName: "TomcatInstanceRoleAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"        
            Statement:
              - 
                Effect: "Allow"
                Action:
                  - "logs:*"
                Resource:
                  - "*"
              - 
                Effect: "Allow"
                Action:
                  - "s3:*"
                Resource:
                  - "arn:aws:s3:::aws-codedeploy-us-east-1/latest/*"
                  - Fn::Sub: arn:aws:s3:::${ArtifactStoreBucket}/*                  
      Path: "/"      
  TomcatProfileUnref:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref TomcatInstanceRole
      InstanceProfileName: 
        Fn::Sub: TomcatProfile-${AWS::StackName}
  TomcatSecGrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: vpc-a0383dc5
      GroupDescription: dummy01
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
      - CidrIp: 173.242.16.106/32
        FromPort: 8080
        IpProtocol: tcp
        ToPort: 8080
      - CidrIp: 68.100.234.63/32
        FromPort: 8080
        IpProtocol: tcp
        ToPort: 8080        
  Tomcat:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: 
        Fn::Sub: TomcatProfile-${AWS::StackName}
      KeyName: oregonkeypair
      SecurityGroupIds: 
        - !Ref TomcatSecGrp
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            -
              - "#!/bin/bash -ex\n"
              - "yum install git -y\n"
              - "sudo -u ec2-user bash -c 'cd /home/ec2-user; git clone https://github.com/craigwongva/microqoder'\n"
              - "sudo -u ec2-user bash -c 'cd /home/ec2-user/microqoder; ./userdata/install' \n"
      InstanceType: t2.micro
      ImageId: ami-32d8124a
      Tags:
        - Key: Name
          Value: MicroqoderTomcat
  CBProjectUnref:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: 
        Fn::Sub: MicroqoderCBProject-${AWS::StackName}
      Description: Build Grails inside Docker
      ServiceRole:
        Fn::GetAtt: [ CBRole, Arn ]
      Artifacts:
        Type: S3
        Location: !Ref ArtifactStoreBucket
        Name: CodeDeployArtifactDummy
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: craigwongva/grails240:grails240
      Source:
        Location: https://github.com/craigwongva/microqoder
        BuildSpec: buildspec.yml
        Type: GITHUB
        Auth: 
          Type: OAUTH
      TimeoutInMinutes: 5          
  CDApp:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: 
        Fn::Sub: CDAppName-${AWS::StackName}
  CDGroupUnref:
    Type: AWS::CodeDeploy::DeploymentGroup
    DependsOn: CDRole
    DependsOn: CDApp    
    Properties:
      ApplicationName: 
        Fn::Sub: CDAppName-${AWS::StackName}
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      DeploymentGroupName: 
        Fn::Sub: CDGroup-${AWS::StackName}
      Ec2TagFilters:
        - Key: Name
          Value: MicroqoderTomcat
          Type: KEY_AND_VALUE
      ServiceRoleArn: !GetAtt [CDRole, Arn]      
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref ArtifactStoreBucket
        Type: S3
      DisableInboundStageTransitions: []
      Name: 
        Fn::Sub: MicroqoderPipeline-${AWS::StackName}
      RoleArn: !GetAtt [CPRole, Arn]
      Stages:
        - Name: Sourcing
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: craigwongva
                Repo: microqoder
                Branch: master
                OAuthToken: !Ref githubpassword
                PollForSourceChanges: true
              OutputArtifacts:
                - Name: SourceArtifact
        - Name: BuildStage
          Actions:
            - Name: BuildAction
              InputArtifacts:
                - Name: SourceArtifact
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: 
                  Fn::Sub: MicroqoderCBProject-${AWS::StackName}
              OutputArtifacts:                
                - Name: BuildArtifact                 
        - Name: DeployStage
          Actions:
            - Name: DeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: 1            
              InputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ApplicationName: 
                  Fn::Sub: CDAppName-${AWS::StackName}
                DeploymentGroupName: 
                  Fn::Sub: CDGroup-${AWS::StackName}
Outputs:
  artifactStoreBucketOutput:
    Value: !Ref ArtifactStoreBucket
    Export:
      Name: 
        Fn::Sub: microqoder-bucket-${AWS::StackName}
